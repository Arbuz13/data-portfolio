/* 1 Total sales for each menu category for a given date range*/
Select  category_name,sum(price*quantity_sold) as total_sales
from price
inner join menu
on price.menu_item_id =menu.menu_item_id
inner join category
on category.category_id = menu.category_id
inner join sales
on menu.menu_item_id = sales.menu_item_id
inner join transactions 
on sales.transaction_id =transactions.transaction_id
where transaction_date between '2024-11-01' and '2024-11-12'
group by 1
order by 2;

/* 2 Top 10 most popular menu items for a given date range, including item name, category, and total sales*/

select category_name, item_name,sum(quantity_sold) as total_quantity_Sold, sum(price*quantity_sold) as total_sales from price 
inner join menu
on menu.menu_item_id = price.menu_item_id
inner join category
on category.category_id = menu.category_id
inner join sales
on menu.menu_item_id = sales.menu_item_id
inner join transactions 
on sales.transaction_id =transactions.transaction_id
where transaction_date between '2024-11-01' and '2024-11-20'
group by 1,2
order by 4 desc
limit 10;

/* 3 Customer reservation history, including name, contact details, and number of reservations made in the last month*/

select first_name, last_name, phone_number, count(reservation_id) as number_of_reservation from customer
left join contact
on customer.customer_id = contact.customer_id
left join reservation
on customer.customer_id = reservation.customer_id
where reservation_date between now() - interval '1 month' and now()
group by 1,2,3
order by 4 desc;

/* 4 Current inventory levels for each ingredient, including ingredient name, category, and quantity in stock*/

select ingredient_name, ingredient_category, quantity_in_stock from
ingredient
inner join inventory
on inventory.ingredient_id = ingredient.ingredient_id
order by 3 desc;

/* 5 Revenue generated by each restaurant location in the last year, including location name and total revenue*/

select location_name,sum(total_amount) as Revenue_per_location from restaurant_location
inner join transactions
on restaurant_location.restaurant_location_id = transactions.restaurant_location_id
where transaction_date between now() - interval '1 year' and now()
group by 1
order by sum(total_amount) desc;

/*session 7 reports queries*/
/* 1 Daily revenue report*/
select  date(transaction_date)as transaction_date, sum(total_amount) as daily_revenue
from transactions
group by 1
order by 1;


/* 3 Inventory report*/

SELECT ingredient_name, ingredient_category,quantity_in_stock,unit_of_measure
FROM Ingredient 
JOIN Inventory  ON inventory.ingredient_id = ingredient.ingredient_id
ORDER BY 1;

/*creating a VIEW*/
/*Creating a view called sales_report_by_category*/

create view sales_report_by_category as SELECT category_name, item_name, SUM(quantity_sold) AS total_quantity_sold, SUM(price * quantity_sold) AS total_sales
FROM Sales 
JOIN transactions  ON sales.transaction_id = transactions.transaction_id
JOIN menu ON menu.menu_item_id = sales.menu_item_id
JOIN category ON category.category_id = menu.category_id
JOIN price ON menu.menu_item_id = price.menu_item_id
GROUP BY 1,2
ORDER BY category_name, total_sales DESC;

/* 2 Itemized sales report by category*/
select * from sales_report_by_category;

/*creating a function and trigger*/
CREATE OR REPLACE FUNCTION update_inventory_sales()
RETURNS TRIGGER AS $$
DECLARE
    v_ingredient_id INT;
    v_quantity_sold DECIMAL;
    v_quantity_per_item DECIMAL;
BEGIN
 /*Get the ingredient ID and quantity sold*/
    SELECT 
        ingredient.ingredient_id, 
        sales.quantity_sold
    INTO 
        v_ingredient_id, 
        v_quantity_sold
    FROM 
        sales 
    JOIN 
        transactions ON sales.transaction_id = transactions.transaction_id
    JOIN 
        restaurant_location ON transactions.restaurant_location_id = restaurant_location.restaurant_location_id
    JOIN 
        inventory ON inventory.restaurant_location_id = restaurant_location.restaurant_location_id
    JOIN 
        ingredient ON inventory.ingredient_id = ingredient.ingredient_id
    WHERE 
        sales_id = NEW.sales_id;

 /*Fetch the quantity per item*/
    SELECT 
        quantity_in_stock 
    INTO 
        v_quantity_per_item
    FROM 
        inventory
    WHERE 
        inventory_id = v_ingredient_id;

  /* Update the inventory*/
    UPDATE 
        inventory
    SET 
        quantity_in_stock = quantity_in_stock - v_quantity_sold 
    WHERE 
        ingredient_id = v_ingredient_id
        AND restaurant_location_id = (SELECT restaurant_location_id 
                                      FROM transactions 
                                      WHERE transaction_id = NEW.transaction_id);

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

/*Create a trigger on the sales table*/
CREATE TRIGGER update_inventory_trigger
AFTER INSERT ON sales
FOR EACH ROW EXECUTE FUNCTION update_inventory_sales();



INSERT INTO sales (transaction_id, menu_item_id, quantity_sold) 
VALUES 
    (2, 2, 8);
/* Customer details masking*/	
create view customer_details as 
SELECT customer.customer_id,
       first_name,
	   last_name,
	   concat(substring(email from 1 for 3), '****@****.com') AS email,
	   concat('***-***-',substring(phone_number from 9 for 4)) AS phone_number
			  from customer
			  join contact on customer.customer_id=contact.customer_id;
			  
SELECT * FROM customer_details;

/*creating a function that tracks daily sales*/
CREATE OR REPLACE FUNCTION generate_daily_sales_report() RETURNS TABLE (
    transaction_date TIMESTAMP,
     total_amount DECIMAL (10,2)
) AS $$
BEGIN
    RETURN QUERY SELECT transactions.transaction_date, SUM(transactions.total_amount)::DECIMAL(10,2) 
    FROM transactions
   GROUP BY 1;
END;
$$ LANGUAGE plpgsql;

/*assigning roles to users*/
create ROLE readers;
create ROLE managers;

  Grant SELECT ON ALL TABLES in SCHEMA public to readers;
  Grant Select, insert, update, delete on all tables in schema public to managers;
  
 create USER sushm with PASSWORD 'divya123';
 create USER lakma with PASSWORD 'lak123';
     Grant readers to sushm;
	 grant managers to lakma;
	 
select grantee, privilege_type, table_schema, table_name from information_schema.role_table_grants
where grantee = 'readers';

grant select on all tables in schema public to reader;
select grantee, privilege_type, table_schema, table_name from information_schema.role_table_grants
where grantee = 'managers';





-- SQL queries for analytics: sales by category, top items, reservations, inventory, revenue by location
